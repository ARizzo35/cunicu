// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocketClient is the client API for Socket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocketClient interface {
	GetStatus(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Status, error)
	StreamEvents(ctx context.Context, in *StreamEventsParams, opts ...grpc.CallOption) (Socket_StreamEventsClient, error)
	UnWait(ctx context.Context, in *UnWaitParams, opts ...grpc.CallOption) (*Error, error)
	Stop(ctx context.Context, in *StopParams, opts ...grpc.CallOption) (*Error, error)
	Sync(ctx context.Context, in *SyncParams, opts ...grpc.CallOption) (*Error, error)
	RestartPeer(ctx context.Context, in *RestartPeerParams, opts ...grpc.CallOption) (*Error, error)
	RemoveInterface(ctx context.Context, in *RemoveInterfaceParams, opts ...grpc.CallOption) (*Error, error)
	SyncInterfaceConfig(ctx context.Context, in *InterfaceConfigParams, opts ...grpc.CallOption) (*Error, error)
	AddInterfaceConfig(ctx context.Context, in *InterfaceConfigParams, opts ...grpc.CallOption) (*Error, error)
	SetInterfaceConfig(ctx context.Context, in *InterfaceConfigParams, opts ...grpc.CallOption) (*Error, error)
}

type socketClient struct {
	cc grpc.ClientConnInterface
}

func NewSocketClient(cc grpc.ClientConnInterface) SocketClient {
	return &socketClient{cc}
}

func (c *socketClient) GetStatus(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/wice.Socket/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) StreamEvents(ctx context.Context, in *StreamEventsParams, opts ...grpc.CallOption) (Socket_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Socket_ServiceDesc.Streams[0], "/wice.Socket/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &socketStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Socket_StreamEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type socketStreamEventsClient struct {
	grpc.ClientStream
}

func (x *socketStreamEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socketClient) UnWait(ctx context.Context, in *UnWaitParams, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wice.Socket/UnWait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) Stop(ctx context.Context, in *StopParams, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wice.Socket/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) Sync(ctx context.Context, in *SyncParams, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wice.Socket/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) RestartPeer(ctx context.Context, in *RestartPeerParams, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wice.Socket/RestartPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) RemoveInterface(ctx context.Context, in *RemoveInterfaceParams, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wice.Socket/RemoveInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) SyncInterfaceConfig(ctx context.Context, in *InterfaceConfigParams, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wice.Socket/SyncInterfaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) AddInterfaceConfig(ctx context.Context, in *InterfaceConfigParams, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wice.Socket/AddInterfaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) SetInterfaceConfig(ctx context.Context, in *InterfaceConfigParams, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wice.Socket/SetInterfaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocketServer is the server API for Socket service.
// All implementations must embed UnimplementedSocketServer
// for forward compatibility
type SocketServer interface {
	GetStatus(context.Context, *Void) (*Status, error)
	StreamEvents(*StreamEventsParams, Socket_StreamEventsServer) error
	UnWait(context.Context, *UnWaitParams) (*Error, error)
	Stop(context.Context, *StopParams) (*Error, error)
	Sync(context.Context, *SyncParams) (*Error, error)
	RestartPeer(context.Context, *RestartPeerParams) (*Error, error)
	RemoveInterface(context.Context, *RemoveInterfaceParams) (*Error, error)
	SyncInterfaceConfig(context.Context, *InterfaceConfigParams) (*Error, error)
	AddInterfaceConfig(context.Context, *InterfaceConfigParams) (*Error, error)
	SetInterfaceConfig(context.Context, *InterfaceConfigParams) (*Error, error)
	mustEmbedUnimplementedSocketServer()
}

// UnimplementedSocketServer must be embedded to have forward compatible implementations.
type UnimplementedSocketServer struct {
}

func (UnimplementedSocketServer) GetStatus(context.Context, *Void) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSocketServer) StreamEvents(*StreamEventsParams, Socket_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedSocketServer) UnWait(context.Context, *UnWaitParams) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnWait not implemented")
}
func (UnimplementedSocketServer) Stop(context.Context, *StopParams) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedSocketServer) Sync(context.Context, *SyncParams) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedSocketServer) RestartPeer(context.Context, *RestartPeerParams) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartPeer not implemented")
}
func (UnimplementedSocketServer) RemoveInterface(context.Context, *RemoveInterfaceParams) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInterface not implemented")
}
func (UnimplementedSocketServer) SyncInterfaceConfig(context.Context, *InterfaceConfigParams) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInterfaceConfig not implemented")
}
func (UnimplementedSocketServer) AddInterfaceConfig(context.Context, *InterfaceConfigParams) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterfaceConfig not implemented")
}
func (UnimplementedSocketServer) SetInterfaceConfig(context.Context, *InterfaceConfigParams) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInterfaceConfig not implemented")
}
func (UnimplementedSocketServer) mustEmbedUnimplementedSocketServer() {}

// UnsafeSocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocketServer will
// result in compilation errors.
type UnsafeSocketServer interface {
	mustEmbedUnimplementedSocketServer()
}

func RegisterSocketServer(s grpc.ServiceRegistrar, srv SocketServer) {
	s.RegisterService(&Socket_ServiceDesc, srv)
}

func _Socket_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wice.Socket/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).GetStatus(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SocketServer).StreamEvents(m, &socketStreamEventsServer{stream})
}

type Socket_StreamEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type socketStreamEventsServer struct {
	grpc.ServerStream
}

func (x *socketStreamEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Socket_UnWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnWaitParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).UnWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wice.Socket/UnWait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).UnWait(ctx, req.(*UnWaitParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wice.Socket/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).Stop(ctx, req.(*StopParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wice.Socket/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).Sync(ctx, req.(*SyncParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_RestartPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartPeerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).RestartPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wice.Socket/RestartPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).RestartPeer(ctx, req.(*RestartPeerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_RemoveInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInterfaceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).RemoveInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wice.Socket/RemoveInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).RemoveInterface(ctx, req.(*RemoveInterfaceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_SyncInterfaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).SyncInterfaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wice.Socket/SyncInterfaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).SyncInterfaceConfig(ctx, req.(*InterfaceConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_AddInterfaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).AddInterfaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wice.Socket/AddInterfaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).AddInterfaceConfig(ctx, req.(*InterfaceConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_SetInterfaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).SetInterfaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wice.Socket/SetInterfaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).SetInterfaceConfig(ctx, req.(*InterfaceConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Socket_ServiceDesc is the grpc.ServiceDesc for Socket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Socket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wice.Socket",
	HandlerType: (*SocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Socket_GetStatus_Handler,
		},
		{
			MethodName: "UnWait",
			Handler:    _Socket_UnWait_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Socket_Stop_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Socket_Sync_Handler,
		},
		{
			MethodName: "RestartPeer",
			Handler:    _Socket_RestartPeer_Handler,
		},
		{
			MethodName: "RemoveInterface",
			Handler:    _Socket_RemoveInterface_Handler,
		},
		{
			MethodName: "SyncInterfaceConfig",
			Handler:    _Socket_SyncInterfaceConfig_Handler,
		},
		{
			MethodName: "AddInterfaceConfig",
			Handler:    _Socket_AddInterfaceConfig_Handler,
		},
		{
			MethodName: "SetInterfaceConfig",
			Handler:    _Socket_SetInterfaceConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _Socket_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "socket.proto",
}
